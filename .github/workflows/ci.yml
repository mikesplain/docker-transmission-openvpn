# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  buildx:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Buildx setup
        uses: crazy-max/ghaction-docker-buildx@v1
      - name: Dockerhub login
        run: echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u mike.splain --password-stdin 2>&1
      - name: Run Buildx
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}
          echo "Un-commenting cross-build instructions in Dockerfile.armhf"
          sed -i 's/^#\(.*cross-build.*\)/\1/' Dockerfile.armhf

          docker buildx build \
            --progress plain \
            --platform=linux/arm64,linux/arm/v7,linux/arm/v6 \
            -t $IMAGE_ID:latest \
            --push \
            -f Dockerfile.armhf \
            .
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Log into registry
        run: echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u mike.splain --password-stdin

      - name: Push image
        run: |
          docker build . --file Dockerfile --tag $IMAGE_NAME
          
          IMAGE_ID=ghcr.io/${{ github.repository }}
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
